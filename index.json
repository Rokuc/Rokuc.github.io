[{"authors":null,"categories":null,"content":"I am a data science intern at the multinational drink and brewing company AB InBev based in Leuven, Belgium.\nBefore joining Ab InBev, I studied quantitative finance at Vienna University of Economics and Business. My master\u0026rsquo;s thesis focused on comparing the performance of various statistical learning algorithms in classifying documents from microblogging platforms.\nIn my spare time, I work on different projects and travel.\n  Download my resum√©.\n","date":1628553600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1623024000,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I am a data science intern at the multinational drink and brewing company AB InBev based in Leuven, Belgium.\nBefore joining Ab InBev, I studied quantitative finance at Vienna University of Economics and Business.","tags":null,"title":"Rok Jankovic","type":"authors"},{"authors":["Rok Jankovic"],"categories":[],"content":"Libraries Used in our project In this section we will import a few packages that will be used through our analysis.\n# Importing ML packages library(FNN) # Text Analysis library(tokenizers) library(tm) library(word2vec) # Data Manipulation library(data.table)  The machine learning package FNN, is a package that implements the knn algorithm. Next we use some packages for Text analysis including a tokenization package, the text mining package to implement the document term matrices and the word2vec package. Finally the data.table package is useful to work with an alternative data structure.\nOur data In our project we will use data downloaded from the StockTwits platform. The dataset is pre-labeled as bullish/bearish and consists of about 2,500,000 preprocessed documents.\nsetwd(\u0026quot;E:/Projects\u0026quot;) load(\u0026quot;sentiment_data_pp.RData\u0026quot;) head(sentiment_data,n=1)  First let us have a look at the first document to get a general idea of how our data set looks.\n Text 1 cashtag earnings report two day bullish lead earnings growth linktag herb Sentiment 1 Bullish  Experiment setup First we will create an unbalanced dataset of 100,000 documents including 13% Bearish documents and 87% Bullish documents.\nind_Bullish \u0026lt;- which(sentiment_data$Sentiment==\u0026quot;Bullish\u0026quot;) ind_Bearish \u0026lt;- which(sentiment_data$Sentiment==\u0026quot;Bearish\u0026quot;) n \u0026lt;- 50000 x \u0026lt;- rbind(sentiment_data[ind_Bearish[1:n*2*0.13],],sentiment_data[ind_Bullish[1:n*2*0.87],])  Now we will set up a simple k-fold CV framework. First we create 10 folds and store it in the folds_data variable.\nkf \u0026lt;- 10 #Set number of folds bullish_sentiment \u0026lt;- data.table(x[x$Sentiment==\u0026quot;Bullish\u0026quot;,], rname = rownames(x[x$Sentiment==\u0026quot;Bullish\u0026quot;,])) #take only the bullish sentiment bearish_sentiment \u0026lt;- data.table(x[x$Sentiment==\u0026quot;Bearish\u0026quot;,], rname = rownames(x[x$Sentiment==\u0026quot;Bearish\u0026quot;,])) set.seed(2) bull_index \u0026lt;- split(bullish_sentiment$rname, sample(1:kf, length(bullish_sentiment$rname), replace=T)) set.seed(2) bear_index \u0026lt;- split(bearish_sentiment$rname, sample(1:kf, length(bearish_sentiment$rname), replace=T)) folds \u0026lt;- lapply(1:kf, function(y) c(bull_index[[y]],bear_index[[y]])) folds_data \u0026lt;- lapply(folds, function(y) x[y,])  Next we create 10 repetitions of the 10 folds, which will result in a list containing 10 elements each of which will be a list of two elements a training dataset and a testing dataset.\ndata_prep_list\u0026lt;-function(data_set){ tests\u0026lt;-c(1:kf) groups \u0026lt;- list() #for each test set, construct a respective list with all combinations of train sets for(i in seq_along(tests)){ #get train and validation sets for the given test set train\u0026lt;-tests[!(tests %in% tests[i])] #separate train and validation tr\u0026lt;-combn(train,(kf-1)) #create list for train and validation sets #first create a list of 8 for the train data training \u0026lt;- list() for(k in seq_len(ncol(tr))){ train \u0026lt;- data_set[tr[,k]] train_table \u0026lt;- data.table() for (b in 1:length(train)){ train_table \u0026lt;- rbind(train_table, train[[b]]) } } groups[[i]] \u0026lt;- list(training=train_table, test=data_set[[i]]) } groups } raw_kfolds \u0026lt;- data_prep_list(folds_data)  Creating the Document Term Matrix (DTM) and the Word2Vec (W2V) model First let us create a tf-idf DTM and later move on with the W2V model\ntf-idf DTM We will create a set of training DTM\u0026rsquo;s and store them in train_dtm_kfold_freq and also a set of test DTM\u0026rsquo;s storing them in test_dtm_kfold_freq.\ntrain_dtm_kfold_freq \u0026lt;- lapply(1:kf, function(x) DocumentTermMatrix(Corpus(VectorSource(raw_kfolds[[x]]$train$Text)), control = list(weighting = function(x) weightTfIdf(x, normalize = FALSE)))) test_dtm_kfold_freq \u0026lt;- lapply(1:kf, function(x) DocumentTermMatrix(Corpus(VectorSource(raw_kfolds[[x]]$test$Text)), control = list(weighting =function(x)weightTfIdf(x, normalize = FALSE))))  W2V model Let us train our continuous bag of words W2V model on our dataset containing 2.5 mil documents.\nmodel \u0026lt;- word2vec(sentiment_data$Text,type=\u0026quot;cbow\u0026quot;,min_count = 40,window =  Now that the model is trained we will create the datasets we need to make our predictions. First we create some datasets that include the sentiment and raw text data.\nw2v_sentiment \u0026lt;- list() for(i in 1:kf){ w2v_sentiment[[i]] \u0026lt;- raw_kfolds[[i]]$training$Sentiment } w2v_sentiment_test \u0026lt;- list() for(i in 1:kf){ w2v_sentiment_test[[i]] \u0026lt;- raw_kfolds[[i]]$test$Sentiment } w2v_Text \u0026lt;- list() for(i in 1:kf){ w2v_Text[[i]] \u0026lt;- raw_kfolds[[i]]$training$Text } w2v_Text_test \u0026lt;- list() for(i in 1:kf){ w2v_Text_test[[i]] \u0026lt;- raw_kfolds[[i]]$test$Text }  Next we tokenize our data and learn the vector representations of each paragraph in the training and the test set.\nx \u0026lt;- lapply(1:kf, function(x) tokenize_words(w2v_Text[[x]])) x_test \u0026lt;- lapply(1:kf, function(x) tokenize_words(w2v_Text_test[[x]])) emb \u0026lt;- lapply(1:kf, function(z) doc2vec(model, x[[z]])) emb_test \u0026lt;- lapply(1:kf, function(z) doc2vec(model, x_test[[z]]))  Lastly we create data frames we can use in our model, and name the columns.\nw2v_Sentiment_data \u0026lt;- list() for(i in 1:kf){ w2v_Sentiment_data[[i]] \u0026lt;- data.frame(emb[[i]],w2v_sentiment=w2v_sentiment[[i]]) } for(i in 1:kf){ colnames(w2v_Sentiment_data[[i]]) \u0026lt;- c('a_1', 'a_2', 'a_3', 'a_4', 'a_5', 'a_6', 'a_7', 'a_8', 'a_9', 'a_10', 'a_11', 'a_12', 'a_13', 'a_14', 'a_15', 'a_16', 'a_17', 'a_18', 'a_19', 'a_20', 'a_21', 'a_22', 'a_23', 'a_24', 'a_25', 'a_26', 'a_27', 'a_28', 'a_29', 'a_30', 'a_31', 'a_32', 'a_33', 'a_34', 'a_35', 'a_36', 'a_37', 'a_38', 'a_39', 'a_40', 'a_41', 'a_42', 'a_43', 'a_44', 'a_45', 'a_46', 'a_47', 'a_48', 'a_49', 'a_50', 'w2v_sentiment') } for(i in 1:kf){ colnames(emb_test[[i]]) \u0026lt;-c('a_1', 'a_2', 'a_3', 'a_4', 'a_5', 'a_6', 'a_7', 'a_8', 'a_9', 'a_10', 'a_11', 'a_12', 'a_13', 'a_14', 'a_15', 'a_16', 'a_17', 'a_18', 'a_19', 'a_20', 'a_21', 'a_22', 'a_23', 'a_24', 'a_25', 'a_26', 'a_27', 'a_28', 'a_29', 'a_30', 'a_31', 'a_32', 'a_33', 'a_34', 'a_35', 'a_36', 'a_37', 'a_38', 'a_39', 'a_40', 'a_41', 'a_42', 'a_43', 'a_44', 'a_45', 'a_46', 'a_47', 'a_48', 'a_49', 'a_50') }  Making the predictions with the KNN algorithm We will make predictions using the DTM and the W2V model.\nKNN_pred \u0026lt;- lapply(1:kf, function(x) FNN::knn(train=train_dtm_kfold_freq[[x]], test=test_dtm_kfold_freq[[x]], cl=raw_kfolds[[x]]$training$Sentiment)) KNN_w2v_pred \u0026lt;-lapply(1:kf, function(x) FNN::knn(train=w2v_Sentiment_data[[x]][,-51],test=emb_test[[x]], cl=w2v_Sentiment_data1[[x]][,51]))  The results show that using the W2V model, tremendously improves the performance of our algorithm in terms of accuracy.\n AC KNN_DTM 54.39 KNN_W2V 85.33  ","date":1628553600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623024000,"objectID":"be96cdd6613a2df0c8ec3e4163f45df6","permalink":"https://rokuc.github.io/post/knn_w2v_dtm/","publishdate":"2021-08-10T00:00:00Z","relpermalink":"/post/knn_w2v_dtm/","section":"post","summary":"In this project we are again classifying investor sentiment. We compare the performance of K-Nearest Neighbors using a tf-idf document term matrix and the Word2vec model.","tags":["R"],"title":"Word2Vec vs Document Term Matrix","type":"post"},{"authors":["Rok Jankovic"],"categories":[],"content":"Starting our project? Let me start by explaining what classification is. Classification in our case is systematic arrangement of data in different categories according to established criteria which are learned by our algorithms. In this article we will focus more on the code rather than going in to the theory of different algorithms. After we have chosen the dataset that we would like to work with we can start to code.\nAs the first task we will have a look at weather there is a mutual relationship or connection between two or more variables in the echo_tracks dataset.\nimport pandas as pd corr_metrics = echo_tracks.corr() corr_metrics.style.background_gradient()  Since we didn\u0026rsquo;t find any particularly strong correlations between our features, we can instead use a common approach to reduce the number of features called principal component analysis (PCA).\nPrinciple Component Analysis It is possible that the variance between genres can be explained by just a few features in the dataset. PCA rotates the data along the axis of highest variance, thus allowing us to determine the relative contribution of each feature of our data towards the variance between classes.\nHowever, since PCA uses the absolute variance of a feature to rotate the data, a feature with a broader range of values will overpower and bias the algorithm relative to the other features. To avoid this, we must first normalize our data. There are a few methods to do this, but a common way is through standardization, such that all features have a mean = 0 and standard deviation = 1 (the resultant is a z-score).\n# Import our plotting module, and PCA class import matplotlib.pyplot as plt import numpy as np from sklearn.decomposition import PCA # Get our explained variance ratios from PCA using all features pca = PCA() pca.fit(scaled_train_features) exp_variance = pca.explained_variance_ratio_ # Calculate the cumulative explained variance cum_exp_variance = np.cumsum(exp_variance) # Plot the cumulative explained variance and draw a dashed line at 0.85. fig, ax = plt.subplots() ax.plot(cum_exp_variance) ax.axhline(y=0.85, linestyle='--')  Based on the plot above we choose 6 components or the number of components where 85% of the variance can be explained and perform PCA with the chosen number of components.\nn_components = 6 pca = PCA(n_components, random_state=10) pca.fit(scaled_train_features) pca_projection = pca.transform(scaled_train_features)  Train a Decision Tree Here we first split data into train and test data using the train test split function. Later we train our decision tree and make predictions using our model. Finally we create the report for the decision tree.\n# Import train_test_split function and Decision tree classifier from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier # Split our data train_features, test_features, train_labels, test_labels = train_test_split(pca_projection, labels, random_state=10) # Train our decision tree tree = DecisionTreeClassifier(random_state=10) tree.fit(train_features, train_labels) # Predict the labels for the test data pred_labels_tree = tree.predict(test_features) # Create the classification report for he decision tree from sklearn.metrics import classification_report class_rep_tree = classification_report(pred_labels_tree,test_labels) print(\u0026quot;Decision Tree: \\n\u0026quot;, class_rep_tree)  Let us have a look at our results.\nDecision Tree: precision recall f1-score support Hip-Hop 0.66 0.66 0.66 230 Rock 0.92 0.92 0.92 971 avg / total 0.87 0.87 0.87 1201  ","date":1628121600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1620345600,"objectID":"4f15543b41d545e0a777c774604b6939","permalink":"https://rokuc.github.io/post/pca_python/","publishdate":"2021-08-05T00:00:00Z","relpermalink":"/post/pca_python/","section":"post","summary":"In this project we write a short python code. We use PCA to optimize our variables and decision trees as the machine learning algorithm.","tags":["Python"],"title":"Machine Learning with Python","type":"post"},{"authors":["Rok Jankovic"],"categories":[],"content":"Libraries Used in our project In this section we will import a few packages that will be used through our analysis.\n# Importing ML packages library(fastNaiveBayes) # Text processing packages library(tm) library(textclean) library(stringi) library(stringr) library(gmodels) # Webscraping library(rvest) # Data manipulation packages library(tidyverse) library(data.table)  The machine learning package fastNaiveBayes, is optimal packages to work with large datasets it implements a fast version of the respective na√Øve Bayes algorithm. Next we implement some packages used for the preprocessing of text. The following rvest library helps scrape data from the web. Finally the tidyverse package is a popular package for data manipulation and the data.table package is useful to work with an alternative data structure.\nOur data In our project we will use data downloaded from the StockTwits platform. They provide pre-labeled microblogging data, which is perfect for our example, as we will not have to label data by ourselves. We will use a dataset of 1000 of which 500 are positive (bullish) labeled and 500 are labeled as negative (bearish).\nsetwd(\u0026quot;E:/Projects\u0026quot;) load(\u0026quot;sentiment_data.RData\u0026quot;) head(sentiment_data,n=2)  First let us have a look at the first two documents to get a general idea of how our data set looks.\n Text 1 $AMC if you can‚Äôt beat em join just like $A hedgies this thing so volatile I only need weeklys 2 $A RECENT Twits Trends Today Change 18 % + https://t8sk.com/A Sentiment 1 Bullish 2 Bullish  We have a dataset called sentiment_data with the column Text, and the column Sentiment. We can see that our data is very noisy, and will need lots of preprocessing. But before we move to our preprocessing section let us first download two more datasets we will need in our preprocessing stage. First we will download Ticker symbols from the finviz platform.\nus_stocks \u0026lt;- NULL for(i in seq(1,7661,by = 20)){ us_stocks_data \u0026lt;- read_html(paste0(\u0026quot;https://finviz.com/screener.ashx?v=111\u0026amp;r=\u0026quot;,i)) %\u0026gt;% html_nodes(\u0026quot;table\u0026quot;) %\u0026gt;% .[[17]] %\u0026gt;% html_table(header = TRUE) us_stocks \u0026lt;- rbind(us_stocks,us_stocks_data) } stocks \u0026lt;- us_stocks$Ticker  In the section above we scrape data about all stocks that are listed on finviz, with the goal to obtain all the possible ticker names. This method could be applied for scraping a myriad of other things as well. Now let us move on to downloading emoji sentiment data, and creating a dictionary that can be used with the textclean package.\nemojis \u0026lt;- read_html(paste0(\u0026quot;http://kt.ijs.si/data/Emoji_sentiment_ranking/\u0026quot;)) %\u0026gt;% html_nodes(\u0026quot;#myTable\u0026quot;) %\u0026gt;% html_table(header = TRUE) %\u0026gt;% as.data.frame emojis_lexicon \u0026lt;- data.frame(x=emojis$Char, y=emojis$Sentiment.score..1....1.) emojis_lexicon$x \u0026lt;- iconv(emojis_lexicon$x, \u0026quot;latin1\u0026quot;, \u0026quot;ASCII\u0026quot;, \u0026quot;byte\u0026quot;) emojis_lexicon$y \u0026lt;- ifelse(emojis_lexicon$y\u0026gt;=0,\u0026quot;pos_tag\u0026quot;,\u0026quot;neg_tag\u0026quot;) emojis_lexicon \u0026lt;- data.table(emojis_lexicon)  Here we create a dictionary that we will later use in our preprocessing stage. We assign a positive score to emojis with a score greater or equal to 0 and a negative sentiment score to emojis with a negative score.\nPre-processing stage sentiment_data \u0026lt;- data.frame(gsub(\u0026quot;http.+\u0026quot;,\u0026quot;linktag\u0026quot;,sentiment_data[,1]),sentiment_data[,2]) sentiment_data \u0026lt;- data.frame(stri_replace_all_regex(sentiment_data[,1], pattern = str_c(\u0026quot;\\\\b(\u0026quot;, str_c(stocks, collapse=\u0026quot;|\u0026quot;), \u0026quot;)\\\\b\u0026quot;), replacement = \u0026quot;cashtag\u0026quot;, vectorize_all=FALSE), sentiment_data[,2]) sentiment_data \u0026lt;- data.frame(replace_emoji(sentiment_data[,1], emoji_dt = emojis_lexicon),sentiment_data[,2]) sentiment_data \u0026lt;- data.frame(removePunctuation(sentiment_data[,1]),sentiment_data[,2]) sentiment_data \u0026lt;- data.frame(removeNumbers(sentiment_data[,1]),sentiment_data[,2]) sentiment_data \u0026lt;- data.frame(tolower(sentiment_data[,1]),sentiment_data[,2]) colnames(sentiment_data) \u0026lt;- c(\u0026quot;Text\u0026quot;, \u0026quot;Sentiment\u0026quot;)  Here we use a variety of different approaches to manipulate our data. In the first line we use base r functions to replace urls starting with http with the word linktag. In the second line we replace all ticker symbols with the word cashtag, here we use the dataset stocks containing all the ticker symbols. Next we use our emoji_lexicon that we created in the previous section. Next we remove punctuation, numbers, and convert text to lowercase.\nFinal steps before training and testing our algorithm First let us create a dataset of 800 documents with 400 bullish documents and 400 bearish documents we will use to train our algorithms and a test set of 200 remaining documents.\nbull \u0026lt;- sentiment_data[sentiment_data$Sentiment==\u0026quot;Bullish\u0026quot;,] bear \u0026lt;- sentiment_data[sentiment_data$Sentiment==\u0026quot;Bearish\u0026quot;,] sentiment_data_train \u0026lt;- rbind(bull[1:400,],bear[1:400,]) sentiment_data_test \u0026lt;- rbind(bull[401:500,],bear[401:500,])  Next let us create simple binary document term matrices.\ntrain_dtm \u0026lt;- DocumentTermMatrix(Corpus(VectorSource(sentiment_data_train$Text))) test_dtm \u0026lt;- DocumentTermMatrix(Corpus(VectorSource(sentiment_data_test$Text))) train_dtm$v[train_dtm$v \u0026gt; 0] \u0026lt;- 1 test_dtm$v[test_dtm$v \u0026gt; 0] \u0026lt;- 1  Finaly let us train and test our algorithm.\nNB_classifier \u0026lt;- fnb.bernoulli(x=train_dtm, y=sentiment_data_train$Sentiment, sparse = TRUE) NB_pred \u0026lt;- predict(NB_classifier, test_dtm, type = \u0026quot;class\u0026quot;) CT\u0026lt;- CrossTable(NB_pred, sentiment_data$Sentiment, prop.chisq = FALSE, prop.t = FALSE, dnn = c('predicted', 'actual'))  Let us have a look at our output.\n | actual predicted | Bearish | Bullish | Row Total | -------------|-----------|-----------|-----------| Bearish | 78 | 48 | 126 | | 0.619 | 0.381 | 0.630 | | 0.780 | 0.480 | | -------------|-----------|-----------|-----------| Bullish | 22 | 52 | 74 | | 0.297 | 0.703 | 0.370 | | 0.220 | 0.520 | | -------------|-----------|-----------|-----------| Column Total | 100 | 100 | 200 | | 0.500 | 0.500 | | -------------|-----------|-----------|-----------|  ","date":1628121600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623024000,"objectID":"38319328a2cc48050a0ea0a9390960b1","permalink":"https://rokuc.github.io/post/text_analysis_r/","publishdate":"2021-08-05T00:00:00Z","relpermalink":"/post/text_analysis_r/","section":"post","summary":"In this project we train a simple na√Øve Bayes algorithm to classify the sentiment of documents from the StockTwits platform.","tags":["R"],"title":"Text Classification with R","type":"post"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://rokuc.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]