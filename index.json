[{"authors":null,"categories":null,"content":"I am a data science intern at the multinational drink and brewing company AB InBev based in Leuven, Belgium.\nBefore joining Ab InBev, I studied quantitative finance at Vienna University of Economics and Business. My master\u0026rsquo;s thesis focused on comparing the performance of various statistical learning algorithms in classifying documents from microblogging platforms.\nIn my spare time, I work on various projects, visualize them and post them here.\n  Download my resum√©.\n","date":1624752000,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1620345600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I am a data science intern at the multinational drink and brewing company AB InBev based in Leuven, Belgium.\nBefore joining Ab InBev, I studied quantitative finance at Vienna University of Economics and Business.","tags":null,"title":"Rok Jankovic","type":"authors"},{"authors":["Rok Jankovic"],"categories":[],"content":"Starting our project? Let me start by explaining what classification is. Classification in our case is systematic arrangement of data in different categories according to established criteria which are learned by our algorithms. In this article we will focus more on the code rather than going in to the theory of different algorithms. After we have chosen the dataset that we would like to work with we can start to code.\nAs the first task We will have a look at weather there is a mutual relationship or connection between two or more variables in our dataset. The figure that measures such a relationship is sometimes referred to as the correlation coefficient.\nimport pandas as pd corr_metrics = echo_tracks.corr() corr_metrics.style.background_gradient()  As mentioned earlier, it can be particularly useful to simplify our models and use as few features as necessary to achieve the best result. Since we didn\u0026rsquo;t find any particular strong correlations between our features, we can instead use a common approach to reduce the number of features called principal component analysis (PCA).\nPrinciple Component Analysis It is possible that the variance between genres can be explained by just a few features in the dataset. PCA rotates the data along the axis of highest variance, thus allowing us to determine the relative contribution of each feature of our data towards the variance between classes.\nHowever, since PCA uses the absolute variance of a feature to rotate the data, a feature with a broader range of values will overpower and bias the algorithm relative to the other features. To avoid this, we must first normalize our data. There are a few methods to do this, but a common way is through standardization, such that all features have a mean = 0 and standard deviation = 1 (the resultant is a z-score).\n# Import our plotting module, and PCA class import matplotlib.pyplot as plt import numpy as np from sklearn.decomposition import PCA # Get our explained variance ratios from PCA using all features pca = PCA() pca.fit(scaled_train_features) exp_variance = pca.explained_variance_ratio_ # Calculate the cumulative explained variance cum_exp_variance = np.cumsum(exp_variance) # Plot the cumulative explained variance and draw a dashed line at 0.85. fig, ax = plt.subplots() ax.plot(cum_exp_variance) ax.axhline(y=0.85, linestyle='--')  # choose the n_components where about 85% of our variance can be explained n_components = 6 # Perform PCA with the chosen number of components pca = PCA(n_components, random_state=10) pca.fit(scaled_train_features) pca_projection = pca.transform(scaled_train_features)  Train a Decision Tree # Import train_test_split function and Decision tree classifier from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier # Split our data train_features, test_features, train_labels, test_labels = train_test_split(pca_projection, labels, random_state=10) # Train our decision tree tree = DecisionTreeClassifier(random_state=10) tree.fit(train_features, train_labels) # Predict the labels for the test data pred_labels_tree = tree.predict(test_features) # Create the classification report for both models from sklearn.metrics import classification_report class_rep_tree = classification_report(pred_labels_tree,test_labels) print(\u0026quot;Decision Tree: \\n\u0026quot;, class_rep_tree)  Decision Tree: precision recall f1-score support Hip-Hop 0.66 0.66 0.66 230 Rock 0.92 0.92 0.92 971 avg / total 0.87 0.87 0.87 1201  ","date":1624752000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1620345600,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"https://rokuc.github.io/post/jupyter/","publishdate":"2021-06-27T00:00:00Z","relpermalink":"/post/jupyter/","section":"post","summary":"Starting our project? Let me start by explaining what classification is. Classification in our case is systematic arrangement of data in different categories according to established criteria which are learned by our algorithms.","tags":["Python"],"title":"Coding with Python","type":"post"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://rokuc.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]